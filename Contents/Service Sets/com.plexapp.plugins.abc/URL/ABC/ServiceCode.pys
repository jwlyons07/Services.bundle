ABC_URL = "http://abc.go.com"

####################################################################################################
def MetadataObjectForURL(url):
  data = HTML.ElementFromURL(url, cacheTime=7200, errors='ignore')

  try: #try to return an episode object first
    show_title = data.xpath('//meta[@name="title"]')[0].get('content').split(' - ')[1]
    episode_title = data.xpath('//h2[@id="video_title"]')[0].text
    summary = data.xpath('//p[@id="video_desc"]')[0].text
    episode_index = data.xpath('//li[@id="video_num"]')[0].text.strip('Episode ')
    duration = data.xpath('//li[@id="video_dur"]')[0].text
    durationParts = duration.split(':')
    duration = ((int(durationParts[0])*60) + int(durationParts[1]))*1000
    rating = data.xpath('//li[@id="video_rating"]')[0].text.split(' ')[0]
    thumbUrl = data.xpath('//link[@rel="image_src"]')[0].get('href')

    # Construct a metadata item
    mo = EpisodeObject(
      title = episode_title,
      show = show_title,
      duration = duration, 
      index = int(episode_index),
      content_rating = rating,
      summary = summary,
      thumb = thumbUrl
    )
  
  except: #if it's not an episode return a clip object
    clip_title = data.xpath('//meta[@name="title"]')[0].get('content').split(' - ')[0]
    thumb_url = data.xpath('//div[@id="show_callout"]/img')[0].get('src')
    
    mo = VideoClipObject(
      title = clip_title,
      thumb = thumb_url
    )

  return mo
  
####################################################################################################

def MediaObjectsForURL(url):
  
  return [
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url))],
      protocol = Protocol.RTMP,
      aspect_ratio = "1.78"
    ),
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url))],
      protocol = Protocol.RTMP,
      bitrate = 1600,
      aspect_ratio = "1.78"
    ),
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url))],
      protocol = Protocol.RTMP,
      bitrate = 1000,
      aspect_ratio = "1.78"
    ),
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url))],
      protocol = Protocol.RTMP,
      bitrate = 700,
      aspect_ratio = "1.78",
    ),
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url))],
      protocol = Protocol.RTMP,
      bitrate = 500,
      aspect_ratio = "1.78",
    )
  ]

####################################################################################################

@indirect
def PlayVideo(url, bitrate = None):
  
  FEED_URL = "http://cdn.abc.go.com/vp2/ws/s/contents/2000/utils/mov/13/9024/%s/432"
  BIT_RATES = ['500','700','1000','1600']
  
  video_id = url.split('/')[-2]
  
  if not bitrate:
    index = BIT_RATES.index(Prefs["abc_bitrate"])
  else:
    index = BIT_RATES.index(str(bitrate))
    
  content = XML.ElementFromURL(FEED_URL % video_id)
  
  available = False
  clip = None
  
  while not available and index >= 0:
    path = '//video[@bitrate="%s"]' % BIT_RATES[index]
    res = content.xpath(path)
    if len(res) > 0 and len(res[0].get('src')) > 0:
      clip = res[0].get('src')
      available = True
    index = index - 1
  
  player = "rtmp://cp88586.edgefcs.net/ondemand/"

  oc = ObjectContainer(
    objects = [
      VideoClipObject(
        items = [
          MediaObject(
            parts = [PartObject(key = RTMPVideoURL(player, clip))]
          )
        ]
      )
    ]
  )
  return oc

####################################################################################################

def TestURLs():
    test_urls = []

    data = HTML.ElementFromURL(ABC_URL)

    for video in data.xpath('//h2[contains(text(), "full episodes")]/following-sibling::div[@class="carouselListWrapper"]//a[@class="framedThumbnail"]'):
        if len(test_urls) > 2: break
        else: pass
        test_urls.append(video.get('href'))

    return test_urls

